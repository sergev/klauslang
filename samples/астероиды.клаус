программа Астероиды;

используются 
    Графика, Файлы, События;

тип
    // Точка с дробными координатами
    ДрТочка = структура 
        г, в: дробные; 
    окончание;
    
    // Глобальные параметры игры
    Параметры = структура
        экран: Размер;           // размеры экрана (в точках)
        скорФона: целое;         // скорость движения фона
        задержка: целое;         // задержка основного цикла в миллисекундах
        ракета: структура        // параметры ракеты
            пределы: Размер;     // пределы перемещения ракеты (в точках)
            максСкор: дробное;   // макс. скорость ракеты (в точках за такт)    
            ускорение: дробное;  // приращение скорости (в точках за такт)
            максФакел: целое;    // макс. длина факела центрального двигателя (длина массива изображений факела)
            средФакел: дробное;  // средняя длина факела центрального двигателя (ракета не ускоряется ни вверх, ни вниз)
            корп: структура      // прямоугольник корпуса для расчёта столкновения с астероидом
                вл: Точка;       // верхний левый угол
                пн: Точка;       // правый нижний угол
            окончание;
        окончание;
        выстрел: структура       // параметры выстрелов
            скор: дробное;       // скорость пули (в точках за такт)
            отдача: дробное;     // приращение скорости ракеты при выстреле
            задержка: целое;     // скорострельность -- мин. кол-во тактов между выстрелами
            урон: целое;         // каждый попавший выстрел вычитает это число из прочности астероида
        окончание;
        камень: структура        // параметры астероидов
            максКамень: целое;   // длина массива изображений астероидов
            кво: целое;          // начальное количество астероидов, одновременно летящих на экране
            максПоз: дробное;    // максимальная начальная вертикальная координата астероида
            минСкор: ДрТочка;    // минимальная скорость
            максСкор: ДрТочка;   // максимальная скорость
            вер: массив целых;   // вероятность появления астероидов (длина массива должна равняться камень.макс)
        окончание;
    окончание;

константа
    // Значения глобальных параметров
    парам: Параметры = {
        экран = {г = 1024, в = 768},
        скорФона = 1,
        задержка = 10,
        ракета = {
            пределы = {г = 899, в = 530},
            максСкор = 5,
            ускорение = 0.1,
            максФакел = 6,
            средФакел = 2,
            корп = {
                вл = {г = 30, в = 30}, 
                пн = {г = 90, в = 185}}},
        выстрел = {
            скор = -10,
            отдача = 0.9,
            задержка = 30,
            урон = 2000},
        камень = {
            максКамень = 9,
            кво = 10,
            максПоз = 150,
            минСкор = {г = -2, в = 0.5},
            максСкор = {г = 2, в = 4},
            вер = [1, 2, 4, 6, 10, 12, 15, 25, 40]}};
    
константы
    // Коды клавиш
    клВлево = 37;
    клВверх = 38;
    клВправо = 39;
    клВниз = 40;
    клВыход = 27;
    клПробел = 32;

переменная
    // Словарь состояний клавиш: ДА, если клавиша нажата.
    // Отслеживается состояние только тех клавиш, которые изначально есть в словаре.
    клав: словарь логических ключ целое = {
        клВлево: нет, клВверх: нет, клВправо: нет, клВниз: нет, клВыход: нет, клПробел: нет};

типы
    // Состояние ракеты
    Ракета = структура
        поз: ДрТочка;    // координаты верхнего левого угла ракеты (в точках)
        скор: ДрТочка;   // скорость ракеты (в точках за такт)
        факел: целое;    // длина факела центрального двигателя -- индекс изображения в массиве
        лдв: логическое; // левый двигатель включён
        пдв: логическое; // правый двигатель включён
        выстрел: целое;  // обратный отсчёт тактов до следующего выстрела
    окончание;
    
    // Состояние летящей пули
    Пуля/Пуль = структура
        поз: ДрТочка;
        скор: дробное;
    окончание;
    
    // Состояние летящего астероида
    Камень/Камней = структура
        изо: объект;   // изображение
        поз: ДрТочка;  // координаты верхнего левого угла (в точках)
        скор: ДрТочка; // скорость движения (в точках за такт)
        разм: Размер;  // размер камня
        прочн: целое;  // остаточная прочность (уменьшается при попадании выстрелов)
    окончание;

переменные
    // Картинки, используемые в игре
    картинки: структура
        фон: объект;          // Фоновое изображение
        ркт: объект;          // Изображение ракеты
        цдв: массив объектов; // Изображения факела центрального двигателя
        лдв, пдв: объекты;    // Изображения факелов левого и правого двигателей
        кмн: массив объектов; // Изображения астероидов
    окончание;
    
    // Окно графического вывода
    окно: объект;
    
    // Смещение фоновой картинки
    фон: целое;
    
    // Ракета
    ркт: Ракета;
    
    // Летящие пули
    пули: массив Пуль;
    
    // Летящие астероиды
    камни: массив Камней;
    
    // Набранные очки
    очки: целое;

// Загружает картинки, используемые в игре
процедура загрузитьИзо();
переменные
    к: целое;
    кат: строка;
для картинки, парам начало
    кат := файлПуть(файлВыполняемый()) ++ "/астероиды/";
    фон := грИзоЗагрузить(кат ++ "фон.jpg");
    ркт := грИзоЗагрузить(кат ++ "ракета.png");
    лдв := грИзоЗагрузить(кат ++ "левый.png");
    пдв := грИзоЗагрузить(кат ++ "правый.png");
    длина(цдв, ракета.максФакел);
    для каждого к из цдв цикл
        цдв[к] := грИзоЗагрузить(кат ++ "центр" ++ строка(к+1) ++ ".png");
    длина(кмн, камень.максКамень);
    для каждого к из кмн цикл
        кмн[к] := грИзоЗагрузить(кат ++ "камень" ++ строка(к+1) ++ ".png");
окончание;

// Уничтожает загруженные картинки
процедура уничтожитьИзо();
переменная
    к: целое;
для картинки начало
    уничтожить(фон);
    уничтожить(ркт);
    уничтожить(лдв);
    уничтожить(пдв);
    для каждого к из цдв цикл уничтожить(цдв[к]);
    для каждого к из кмн цикл уничтожить(кмн[к]);
окончание;

// Возвращает индекс изображения нового астероида, исходя из вероятности его появления
функция какойКамень(): целое;
переменные
    сум, слч, к: целое;
для парам.камень начало
    для каждого к из вер цикл сум += вер[к];
    слч := случайное(сум);
    для каждого к из вер обратный цикл начало
        сум -= вер[к];
        если слч > сум то вернуть к;
    конец;
окончание;

// Создаёт случайный астероид в указанных координатах
процедура создатьКамень(к: целое; г, в: дробное);
переменная
    ц: целое;
для камни[к], парам.камень начало
    поз.г := г;
    поз.в := в;
    ц := целое((максСкор.в-минСкор.в)*100);
    скор.в := минСкор.в + случайное(ц)/100;
    ц := целое((максСкор.г-минСкор.г)*100);
    скор.г := минСкор.г + случайное(ц)/100;
    изо := картинки.кмн[какойКамень()];
    разм := грРазмер(изо);
    прочн := разм.г * разм.в;
окончание;

// Уничтожает астероид
процедура уничтожитьКамень(к: целое);
начало
    камни[к].изо := пусто;
окончание;

// Создаёт случайные астероиды в начале игры
процедура создатьКамни();
переменная
    к, шаг, г, в: целое;
для парам.камень начало
    длина(камни, кво);
    шаг := парам.экран.г \ (кво+1);
    для к от 0 до кво-1 цикл начало
        г := (к+1)*шаг - случайное(шаг);
        в := случайное(целое(максПоз));
        создатьКамень(к, г, в);
    конец;
окончание;

// Всё, что нужно сделать перед началом игры
процедура инициализация();
для парам начало
    окно := грОкно("Астероиды");
    грРазмер(окно, экран.г, экран.в);
    загрузитьИзо();
    сбтЗаказать(окно, сбтКлНаж | сбтКлОтп);
    ркт.поз.г := ракета.пределы.г\2;
    ркт.поз.в := ракета.пределы.в;
конец;

// Всё, что нужно сделать по окончании игры
процедура завершение();
начало
    уничтожитьИзо();
    уничтожить(окно);
окончание;

// Возвращает ДА, если прямоугольники пересекаются
функция пересекает(п11, п12: ДрТочка; п21, п22: ДрТочка): логическое;
начало
    вернуть п11.г < п22.г и п12.г >= п21.г и п11.в < п22.в и п12.в >= п21.в;
окончание;

// Рассчитывает положение и состояние ракеты на каждой итерации основного цикла
процедура расчётРакеты();
переменная
    напр: Точка;
    влр, пнр, влк, пнк: ДрТочка;
    к: целое;
для парам.ракета, ркт начало
    // направление ускорения/замедления
    если клав[клВправо] то напр.г += 1;
    если клав[клВлево] то напр.г -= 1;
    если клав[клВниз] то напр.в += 1;
    если клав[клВверх] то напр.в -= 1;
    // ускорение/замедление
    если напр.г > 0 то начало
        скор.г += ускорение;
        если скор.г > максСкор то скор.г := максСкор;
    конец иначе если напр.г < 0 то начало
        скор.г -= ускорение;
        если скор.г < -максСкор то скор.г := -максСкор;
    конец иначе если ркт.скор.г > 0 то начало
        скор.г -= ускорение;
        если скор.г < 0 то скор.г := 0;
    конец иначе если скор.г < 0 то начало
        скор.г += ускорение;
        если скор.г > 0 то скор.г := 0;
    конец;
    если напр.в > 0 то начало
        скор.в += ускорение;
        если скор.в > максСкор то скор.в := максСкор;
    конец иначе если напр.в < 0 то начало
        скор.в -= ускорение;
        если скор.в < -максСкор то скор.в := -максСкор;
    конец иначе если скор.в > 0 то начало
        скор.в -= ускорение;
        если скор.в < 0 то скор.в := 0;
    конец иначе если скор.в < 0 то начало
        скор.в += ускорение;
        если скор.в > 0 то скор.в := 0;
    конец;
    // положение ракеты
    поз.г += скор.г;
    если поз.г < 0 то поз.г := 0
    иначе если поз.г > пределы.г то поз.г := пределы.г;
    поз.в += скор.в;
    если поз.в < 0 то поз.в := 0
    иначе если поз.в > пределы.в то поз.в := пределы.в;
    // факелы двигателей
    пдв := напр.г < 0;
    лдв := напр.г > 0;
    выбор напр.в из
       -1: если факел < максФакел то факел += 1;
        1: если факел > 0 то факел -= 1;
        иначе 
            если факел < средФакел то факел += 1
            иначе если факел > средФакел то факел -= 1;
    конец;
    // скорострельность
    если выстрел > 0 то выстрел -= 1;
    // столкновение с астероидом
    влр := {
        г = поз.г + корп.вл.г,
        в = поз.в + корп.вл.в};
    пнр := {
        г = поз.г + корп.пн.г,
        в = поз.в + корп.пн.в};
    для каждого к из камни цикл начало
        если камни[к].изо = пусто то продолжить;
        влк := камни[к].поз;
        пнк := {
            г = камни[к].поз.г + камни[к].разм.г,
            в = камни[к].поз.в + камни[к].разм.в};
        если пересекает(влр, пнр, влк, пнк) то завершить;
    конец;
окончание;

// Рассчитывает положение летящих пуль на каждой итерации основного цикла,
// отслеживает попадание пуль в астероиды
процедура расчётПуль();
переменная
    к, л: целое;
    нп, кп1, кп2: ДрТочка;
    попадание: логическое;
начало
    для каждого к из пули обратный цикл для пули[к] начало
        попадание := нет;
        нп := {г = поз.г, в = поз.в + парам.выстрел.скор};
        для каждого л из камни обратный цикл для камни[л] начало
            если изо = пусто то продолжить;
            кп1 := поз;
            кп2 := {г = поз.г+разм.г, в = поз.в+разм.в};
            если пересекает(нп, пули[к].поз, кп1, кп2) то начало
                прочн -= парам.выстрел.урон;
                если прочн <= 0 то начало
                    очки += разм.г * разм.в;
                    уничтожитьКамень(л);
                конец;
                удалить(пули, к);
                попадание := да;
                прервать;
            конец;
        конец;
        если попадание то продолжить;
        поз := нп;
        если поз.в < 0 то удалить(пули, к);
    конец;
окончание;

// Рассчитывает положение летящих астероидов на каждой итерации основного цикла
процедура расчётКамней();
переменная
    к: целое;
    г, в: дробное;
начало
    для каждого к из камни цикл для камни[к] начало
        если изо = пусто
        или поз.г > парам.экран.г или поз.г + разм.г <= 0
        или поз.в > парам.экран.в или поз.в + разм.в <= 0 то начало
            создатьКамень(к, 0, 0);
            поз.г := случайное(парам.экран.г-разм.г);
            поз.в := -разм.в+1;
        конец иначе начало
            поз.г += скор.г;
            поз.в += скор.в;
        конец;
    конец;
окончание;

// рассчитывает всю игровую механику
процедура рассчитать();
начало
    фон += парам.скорФона;
    если фон >= парам.экран.в то фон := 0;
    расчётКамней();
    расчётРакеты();
    расчётПуль();
окончание;

// Проверяет возможность выстрела и создаёт летящие пули
процедура выстрелить();
переменная
    п: Пуля;
для парам начало
    если ркт.выстрел > 0 то вернуться;
    п.скор := выстрел.скор;
    п.поз.в := ркт.поз.в + 100;
    п.поз.г := ркт.поз.г + 10;
    добавить(пули, п);
    п.поз.г := ркт.поз.г + 114;
    добавить(пули, п);
    ркт.выстрел := выстрел.задержка;
    ркт.скор.в += выстрел.отдача;
    если ркт.скор.в < -ракета.максСкор то ркт.скор.в := -ракета.максСкор
    иначе если ркт.скор.в > ракета.максСкор то ркт.скор.в := ракета.максСкор;
окончание;

// Выводит ракету на переданный холст
процедура вывестиРакету(холст: объект);
переменные
    г, в: целое;
начало
    г := округл(ркт.поз.г);
    в := округл(ркт.поз.в);
    грИзоВывести(холст, г, в, картинки.ркт);
    если ркт.факел > 0 то грИзоВывести(холст, г+39, в+184, картинки.цдв[ркт.факел-1]);
    если ркт.лдв то грИзоВывести(холст, г-7, в+168, картинки.лдв);
    если ркт.пдв то грИзоВывести(холст, г+109, в+168, картинки.пдв);
окончание;

// Выводит летящие пули на переданный холст
процедура вывестиПули(холст: объект);
переменная
    к, г, в: целое;
начало
    грПеро(холст, $FFFFFF, 3, грспЛиния);
    для каждого к из пули цикл начало
        г := округл(пули[к].поз.г);
        в := округл(пули[к].поз.в);
        грОтрезок(холст, г, в, г, в+3);
    конец;
окончание;

// Выводит астероиды на переданный холст
процедура вывестиКамни(холст: объект);
переменная
    к: целое;
начало
    для каждого к из камни цикл для камни[к] начало
        если изо <> пусто то грИзоВывести(холст, целое(поз.г), целое(поз.в), изо);
    конец;
окончание;

// Выводит набранные очки и подсказку
процедура вывестиТекст(холст: объект);
переменная
    р: Размер;
    с: строка;
начало
    грШрифт(холст, $FFFFFF);
    грКисть(холст, 0, грскПусто);
    грПеро(холст, 0, 0, грскПусто);
    с := "Счёт: " ++ строка(очки);
    р := грРазмерТекста(холст, с);
    грТекст(холст, парам.экран.г - р.г - 10, парам.экран.в - р.в - 10, с);
    грТекст(холст, 10, парам.экран.в - р.в - 10, "Управление: стрелки, пробел, ESC");
окончание;

// Рисует экран на каждой итерации основного цикла
процедура отрисовать();
начало
    грНачать(окно);
    начало
        грИзоВывести(окно, 0, фон-парам.экран.в, картинки.фон);
        грИзоВывести(окно, 0, фон, картинки.фон);
        вывестиКамни(окно);
        вывестиРакету(окно);
        вывестиПули(окно);
        вывестиТекст(окно);
    напоследок
        грЗакончить(окно);
    конец;
окончание;

// Читает события клавиатуры и устанавливает состояния клавиш
процедура обработатьСобытия();
переменная
    сбт: Событие;
начало
    пока сбтЕсть(окно) цикл начало
        сбт := сбтЗабрать(окно);
        выбор сбт.что из
            сбтКлНаж: если есть(клав[сбт.код]) то клав[сбт.код] := да;
            сбтКлОтп: если есть(клав[сбт.код]) то клав[сбт.код] := нет;
        конец;
    конец;
окончание;

// Основной блок программы
константа
    сек = момент(1/68400);
переменная
    нач, врм: момент;
начало
 вывести("Эта программа работает только в отладочной среде Клаус.", НС);
    нач := сейчас();
    инициализация();
    создатьКамни();
    цикл начало
        обработатьСобытия();
        если клав[клПробел] то выстрелить();
        рассчитать();
        отрисовать();
        пауза(парам.задержка);
        врм := сейчас();
        если врм-нач >= сек то начало
            очки += 100;
            нач := врм;
        конец;
    конец пока не клав[клВыход];
напоследок
    завершение();
    вывести("Вы набрали " ++ строка(очки) ++ " очков.", НС);
    вывести("Игра закончена.", НС);
окончание.
